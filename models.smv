MODULE UART (proc, output, input)
VAR
    state : {idle, receive, transmit};
    Rx : unsigned word [ 8 ]; --vector of bytes
    Tx : unsigned word [ 8 ];
ASSIGN
    next (Rx) :=
        case            
            proc = read : input;
            TRUE : (Rx);
        esac;
    next (Tx) :=
        case            
            proc = write : output;
            TRUE : (Tx);
        esac;

TRANS
    proc != read -> next(Rx) = Rx;

MODULE MEM (proc, input, output)
VAR
-- main memory data
    K : unsigned word [ 8 ]; -- The secret data
    data : array 0 .. 7 of array 0 .. 7 of unsigned word [ 8 ]; -- The datastore
ASSIGN
    init (data[1][0]) := K; --K is a word in the datastore at data[1][0]
    next (K) :=
        case
            output = data[1][0] : output;
            TRUE : K;
        esac;
MODULE main
VAR
-- system state 
	proc : {idle, read, write};
    input : unsigned word [ 8 ]; --read data
    output : unsigned word [ 8 ]; --write data
    memory : MEM (proc, input, output); --model instance
    uart0 : UART (proc, input, output); --model instance
ASSIGN
    init (input) := memory.data[0][0];
    init (output) := memory.data[0][0];

LTLSPEC G (output != memory.data[1][0]) -> memory.K = next (memory.K)
